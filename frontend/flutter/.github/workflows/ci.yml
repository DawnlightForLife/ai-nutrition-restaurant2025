name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # 代码质量检查
  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze code
        run: flutter analyze --fatal-infos
        
      - name: Check for unused files
        run: dart run dart_code_metrics:metrics check-unused-files lib
        continue-on-error: true
        
      - name: Run custom lints
        run: flutter analyze --fatal-warnings
        continue-on-error: true

  # 代码生成检查
  code_generation:
    name: Code Generation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Check for uncommitted generated files
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Generated files are not up to date. Please run 'dart run build_runner build' and commit the changes."
            git status
            exit 1
          fi

  # 单元测试
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Run unit tests
        run: flutter test --coverage --reporter expanded
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # 集成测试
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Run integration tests
        run: flutter test integration_test/
        continue-on-error: true

  # Android 构建测试
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code_quality, code_generation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Build Android APK (Debug)
        run: flutter build apk --debug --flavor dev
        
      - name: Build Android APK (Release)
        run: flutter build apk --release --flavor prod
        if: github.ref == 'refs/heads/main'
        
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 7

  # iOS 构建测试
  build_ios:
    name: Build iOS
    runs-on: macos-latest
    timeout-minutes: 45
    needs: [code_quality, code_generation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Build iOS (No Codesign)
        run: flutter build ios --no-codesign --flavor dev
        
      - name: Build iOS Archive (Release)
        run: flutter build ipa --flavor prod
        if: github.ref == 'refs/heads/main'
        continue-on-error: true
        
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: build/ios/iphoneos/*.app
          retention-days: 7
        continue-on-error: true

  # Web 构建测试
  build_web:
    name: Build Web
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code_quality, code_generation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Build Web
        run: flutter build web --dart-define=FLUTTER_WEB_USE_SKIA=true
        
      - name: Upload Web artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: build/web/
          retention-days: 7

  # 依赖安全检查
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Run security audit
        run: flutter pub deps --json | dart pub global run pana
        continue-on-error: true

  # 性能检查
  performance_check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build_android]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: ./apk
          
      - name: Analyze APK size
        run: |
          APK_SIZE=$(stat -c%s ./apk/*.apk | head -1)
          echo "APK Size: $((APK_SIZE / 1024 / 1024)) MB"
          if [ $APK_SIZE -gt 104857600 ]; then  # 100MB
            echo "Warning: APK size exceeds 100MB"
            exit 1
          fi
        continue-on-error: true

  # 部署到测试环境
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit_tests, build_android, build_web]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: ./build/web
          
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # TODO: 实际的部署脚本
          echo "Deployment completed"

  # 部署到生产环境
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit_tests, build_android, build_ios, build_web, security_scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # TODO: 实际的部署脚本
          echo "Production deployment completed"

  # 通知
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [unit_tests, build_android, build_web]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.unit_tests.result == 'success' && needs.build_android.result == 'success'
        run: echo "✅ CI/CD Pipeline completed successfully"
        
      - name: Notify Failure
        if: needs.unit_tests.result == 'failure' || needs.build_android.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed"
          exit 1